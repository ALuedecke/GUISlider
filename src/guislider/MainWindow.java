/*
 * Copyright (C) 2016 ALuedecke
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package guislider;

import com.sun.glass.events.KeyEvent;
import java.awt.Image;
import java.beans.PropertyChangeEvent;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.filechooser.FileFilter;
/**
 *
 * @author ALuedecke
 */
public class MainWindow extends javax.swing.JFrame {
    // Self declared members
    private final FileIO slider;
    private       String preview_path;
    private       JList  avail_selection;
    private       JList  sel_selection;
    
    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        slider = new FileIO(this.txaOutput);
        preview_path = "";
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        lblTemplate = new javax.swing.JLabel();
        lblSource = new javax.swing.JLabel();
        txtSource = new javax.swing.JTextField();
        lblTarget = new javax.swing.JLabel();
        txtTarget = new javax.swing.JTextField();
        lblTitle = new javax.swing.JLabel();
        btnSource = new javax.swing.JButton();
        btnCreate = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        btnTarget = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstAvailable = new javax.swing.JList<>();
        lblAvailable = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstSelected = new javax.swing.JList<>();
        lblSelected = new javax.swing.JLabel();
        lblPreview = new javax.swing.JLabel();
        btnSelect = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        txaOutput = new javax.swing.JTextArea();
        lblOutput = new javax.swing.JLabel();
        lblCopyright = new javax.swing.JLabel();
        btnUp = new javax.swing.JButton();
        btnDown = new javax.swing.JButton();
        cmbTemplate = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Create Slider HTML");
        setIconImage(java.awt.Toolkit.getDefaultToolkit().getImage("res/cube.jpg"));

        mainPanel.setBackground(new java.awt.Color(204, 204, 204));

        lblTemplate.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblTemplate.setForeground(new java.awt.Color(0, 0, 0));
        lblTemplate.setText("Template:");

        lblSource.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblSource.setForeground(new java.awt.Color(0, 0, 0));
        lblSource.setText("Image Source:");

        txtSource.setEditable(false);
        txtSource.setForeground(new java.awt.Color(0, 0, 0));

        lblTarget.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblTarget.setForeground(new java.awt.Color(0, 0, 0));
        lblTarget.setText("HTML Target:");

        txtTarget.setEditable(false);
        txtTarget.setForeground(new java.awt.Color(0, 0, 0));
        txtTarget.setText(FileIO.getCONFIG().getOutput_file()[FileIO.TemplateType.CUBE.toInt()]);

        lblTitle.setFont(new java.awt.Font("FangSong", 1, 24)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(0, 51, 51));
        lblTitle.setText("Create Slider HTML");

        btnSource.setText("...");
        btnSource.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSourceMouseClicked(evt);
            }
        });
        btnSource.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnSourceKeyPressed(evt);
            }
        });

        btnCreate.setText("Create HTML");
        btnCreate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCreateMouseClicked(evt);
            }
        });
        btnCreate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnCreateKeyPressed(evt);
            }
        });

        btnClose.setText("Close");
        btnClose.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCloseMouseClicked(evt);
            }
        });
        btnClose.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnCloseKeyPressed(evt);
            }
        });

        btnTarget.setText("...");
        btnTarget.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnTargetMouseClicked(evt);
            }
        });
        btnTarget.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnTargetKeyPressed(evt);
            }
        });

        lstAvailable.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                lstAvailableFocusGained(evt);
            }
        });
        lstAvailable.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstAvailableValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(lstAvailable);

        lblAvailable.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblAvailable.setForeground(new java.awt.Color(0, 0, 0));
        lblAvailable.setText(" Available Images");

        lstSelected.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                lstSelectedFocusGained(evt);
            }
        });
        lstSelected.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstSelectedValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(lstSelected);

        lblSelected.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblSelected.setForeground(new java.awt.Color(0, 0, 0));
        lblSelected.setText(" Selected Images");

        btnSelect.setIcon(new javax.swing.ImageIcon("res/place.png"));
        btnSelect.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSelectMouseClicked(evt);
            }
        });
        btnSelect.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnSelectKeyPressed(evt);
            }
        });

        btnRemove.setIcon(new javax.swing.ImageIcon("res/remove.png"));
        btnRemove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRemoveMouseClicked(evt);
            }
        });
        btnRemove.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnRemoveKeyPressed(evt);
            }
        });

        txaOutput.setEditable(false);
        txaOutput.setBackground(new java.awt.Color(0, 0, 0));
        txaOutput.setColumns(20);
        txaOutput.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        txaOutput.setForeground(new java.awt.Color(0, 153, 0));
        txaOutput.setRows(5);
        txaOutput.setTabSize(4);
        jScrollPane3.setViewportView(txaOutput);

        lblOutput.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblOutput.setForeground(new java.awt.Color(0, 0, 0));
        lblOutput.setText("Output");

        lblCopyright.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        lblCopyright.setForeground(new java.awt.Color(0, 0, 0));
        lblCopyright.setText("Copyright (c)  A. Luedecke 09/2016");

        btnUp.setIcon(new javax.swing.ImageIcon("res/up.png"));
        btnUp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnUpMouseClicked(evt);
            }
        });
        btnUp.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnUpKeyPressed(evt);
            }
        });

        btnDown.setIcon(new javax.swing.ImageIcon("res/down.png"));
        btnDown.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnDownMouseClicked(evt);
            }
        });
        btnDown.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnDownKeyPressed(evt);
            }
        });

        cmbTemplate.setModel(new javax.swing.DefaultComboBoxModel(FileIO.getCONFIG().getTemplate_file())
        );
        cmbTemplate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbTemplateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblCopyright)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnCreate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, mainPanelLayout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, mainPanelLayout.createSequentialGroup()
                                        .addComponent(lblTemplate)
                                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(mainPanelLayout.createSequentialGroup()
                                                .addGap(38, 38, 38)
                                                .addComponent(lblTitle))
                                            .addGroup(mainPanelLayout.createSequentialGroup()
                                                .addGap(31, 31, 31)
                                                .addComponent(cmbTemplate, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                        .addGap(342, 342, 342))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, mainPanelLayout.createSequentialGroup()
                                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblSource)
                                            .addComponent(lblTarget))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtTarget)
                                            .addComponent(txtSource))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnSource)
                                    .addComponent(btnTarget)))
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(mainPanelLayout.createSequentialGroup()
                                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(mainPanelLayout.createSequentialGroup()
                                                .addComponent(lblAvailable)
                                                .addGap(0, 0, Short.MAX_VALUE))
                                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(btnSelect, javax.swing.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE)
                                            .addComponent(btnRemove, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(12, 12, 12)
                                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                            .addComponent(lblSelected, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(mainPanelLayout.createSequentialGroup()
                                        .addComponent(lblOutput)
                                        .addGap(0, 417, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnUp, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnDown, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblPreview, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTemplate)
                    .addComponent(cmbTemplate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSource)
                    .addComponent(txtSource, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSource))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTarget)
                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtTarget, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnTarget)))
                .addGap(30, 30, 30)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(lblAvailable)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1)
                        .addGap(3, 3, 3))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(lblSelected)
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(mainPanelLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 269, Short.MAX_VALUE)
                                            .addComponent(lblPreview, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(mainPanelLayout.createSequentialGroup()
                                        .addGap(79, 79, 79)
                                        .addComponent(btnUp)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnDown))))
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addGap(104, 104, 104)
                                .addComponent(btnSelect)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnRemove)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblOutput)
                .addGap(3, 3, 3)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnClose)
                            .addComponent(btnCreate))
                        .addContainerGap())
                    .addComponent(lblCopyright, javax.swing.GroupLayout.Alignment.TRAILING)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSourceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSourceMouseClicked
        handleBtnSource();
    }//GEN-LAST:event_btnSourceMouseClicked

    private void btnCloseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCloseMouseClicked
        System.exit(0);
    }//GEN-LAST:event_btnCloseMouseClicked

    private void btnSourceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnSourceKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            handleBtnSource();
        }
    }//GEN-LAST:event_btnSourceKeyPressed

    private void btnCloseKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnCloseKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            System.exit(0);
        }
    }//GEN-LAST:event_btnCloseKeyPressed

    private void btnTargetKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnTargetKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            handleBtnTarget();
        }
    }//GEN-LAST:event_btnTargetKeyPressed

    private void btnTargetMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnTargetMouseClicked
        handleBtnTarget();
    }//GEN-LAST:event_btnTargetMouseClicked

    private void btnCreateKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnCreateKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            handleBtnCreate(this.cmbTemplate.getSelectedIndex());
        }
    }//GEN-LAST:event_btnCreateKeyPressed

    private void btnCreateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCreateMouseClicked
        handleBtnCreate(this.cmbTemplate.getSelectedIndex());
    }//GEN-LAST:event_btnCreateMouseClicked

    private void lstAvailableValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstAvailableValueChanged
        try {
            if (!evt.getValueIsAdjusting()) {
                avail_selection = (JList) evt.getSource();
                preview_path = this.txtSource.getText() 
                             + "/" 
                             + avail_selection.getSelectedValue();
                setImagePreview(preview_path);
            }
        } catch (IndexOutOfBoundsException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.INFO, "Available List updated");
        }
    }//GEN-LAST:event_lstAvailableValueChanged

    private void btnSelectKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnSelectKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            handleBtnSelect();
        }
    }//GEN-LAST:event_btnSelectKeyPressed

    private void btnSelectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSelectMouseClicked
        handleBtnSelect();
    }//GEN-LAST:event_btnSelectMouseClicked

    private void lstSelectedValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstSelectedValueChanged
        try {
            if (!evt.getValueIsAdjusting()) {
                sel_selection = (JList) evt.getSource();
                preview_path = this.txtSource.getText() 
                             + "/" 
                             + sel_selection.getSelectedValue();
                setImagePreview(preview_path);
            }
        } catch (IndexOutOfBoundsException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.INFO, "Selected List updated");
        }
    }//GEN-LAST:event_lstSelectedValueChanged

    private void btnRemoveKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnRemoveKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            handleBtnRemove();
        }
    }//GEN-LAST:event_btnRemoveKeyPressed

    private void btnRemoveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRemoveMouseClicked
        handleBtnRemove();
    }//GEN-LAST:event_btnRemoveMouseClicked

    private void btnUpKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnUpKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            handleBtnUp();
        }
    }//GEN-LAST:event_btnUpKeyPressed

    private void btnUpMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnUpMouseClicked
        handleBtnUp();
    }//GEN-LAST:event_btnUpMouseClicked

    private void btnDownKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnDownKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            handleBtnDown();
        }
    }//GEN-LAST:event_btnDownKeyPressed

    private void btnDownMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDownMouseClicked
        handleBtnDown();
    }//GEN-LAST:event_btnDownMouseClicked

    private void cmbTemplateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbTemplateActionPerformed
        this.txtTarget.setText(FileIO.getCONFIG().getOutput_file()[this.cmbTemplate.getSelectedIndex()]);
        this.txaOutput.setText("");
    }//GEN-LAST:event_cmbTemplateActionPerformed

    private void lstAvailableFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_lstAvailableFocusGained
        try {
            preview_path = this.txtSource.getText() 
                         + "/" 
                         + this.lstAvailable.getSelectedValue();
            setImagePreview(preview_path);
        } catch (IndexOutOfBoundsException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.INFO, "no Entry");
        }
    }//GEN-LAST:event_lstAvailableFocusGained

    private void lstSelectedFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_lstSelectedFocusGained
        try {
            preview_path = this.txtSource.getText() 
                         + "/" 
                         + this.lstSelected.getSelectedValue();
            setImagePreview(preview_path);
        } catch (IndexOutOfBoundsException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.INFO, "no Entry");
        }
    }//GEN-LAST:event_lstSelectedFocusGained

    // Private Methods
    
    private String chooseFilePath(int dlg_type, int sel_mode, String ini_path, FileFilter filter) {
        String name ="";
        
        final JFileChooser chooser = new JFileChooser(); 
        final File path; 

        path = new File(ini_path);
        chooser.setDialogType(dlg_type); 
        chooser.setFileSelectionMode(sel_mode);
        chooser.setCurrentDirectory(path); 

        chooser.addPropertyChangeListener((PropertyChangeEvent e) -> {
            if (e.getPropertyName().equals(JFileChooser.SELECTED_FILE_CHANGED_PROPERTY)
                || e.getPropertyName().equals(JFileChooser.DIRECTORY_CHANGED_PROPERTY)) {
                final File f = (File) e.getNewValue();
            }
        });
        
        try {
            chooser.addChoosableFileFilter(filter);
            chooser.setAcceptAllFileFilterUsed(false);
        } catch (NullPointerException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.INFO, "no FileFilter submitted");
        }

        chooser.setVisible(true); 
        final int result = chooser.showOpenDialog(null); 

        if (result == JFileChooser.APPROVE_OPTION) { 
            name = chooser.getSelectedFile().getPath(); 
        } 
        
        chooser.setVisible(false);
        
        return name;
    }

    private void fillLstAvailable(String folder_name) {
        SortedListModel model = new SortedListModel();
        List<String>     names = slider.getFolderContent(folder_name);
        
        names.stream().forEach((name) -> {
            model.addElement(name);
        });
        
        this.lstAvailable.setModel(model);
    }
    
    private void fillLstAvailable(List<String> names) {
        SortedListModel  model;
        
        try {
            model = (SortedListModel) lstAvailable.getModel();
        } catch (Exception ex) {
            model = new SortedListModel();
        }
        
        for (String name : names) {
            model.addElement(name);
        }

        for (int i = 0; i < model.getSize(); i++) {
            model.addElement(model.getElementAt(i));
        }
        
        this.lstAvailable.setModel(model);
    }

    private void fillLstSelected(List<String> names) {
        DefaultListModel model;
        
        try {
            model = (DefaultListModel) lstSelected.getModel();
        } catch (Exception ex) {
            model = new DefaultListModel();
        }
        
        for (String name : names) {
            model.addElement(name);
        }
        
        this.lstSelected.setModel(model);
    }
    
    @SuppressWarnings("null")
    private void handleBtnCreate(int template_idx) {
        String image_path = this.txtSource.getText();
        String target_path = this.txtTarget.getText();
        FileIO.TemplateType template;
        
        if(!image_path.equals("") && !target_path.equals("")) {
            this.txaOutput.setText("");
            switch (template_idx) {
                case 0:
                    template = FileIO.TemplateType.CUBE;
                    break;
                case 1:
                    template = FileIO.TemplateType.ALBUM;
                    break;
                default:
                    template = FileIO.TemplateType.CUBE;
                    break;
            }
            try {
                DefaultListModel model = (DefaultListModel) this.lstSelected.getModel();
                List<String> names = new ArrayList<>();
                
                for (int i = 0; i< model.getSize(); i++) {
                    names.add(model.getElementAt(i).toString());
                }

                if (!names.isEmpty()) {
                    slider.writeFile(names, template, target_path);
                } else {
                    slider.writeFile(image_path, template, target_path);
                }
            } catch (Exception ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.INFO, "no files selected, use full path");
                slider.writeFile(image_path, template, target_path);
            }

        }
    }
    
    private void handleBtnRemove() {
        try {
            List<String> names = this.sel_selection.getSelectedValuesList();
        
            if (!names.isEmpty()) {
                int curr_idx = this.lstSelected.getSelectedIndex();

                fillLstAvailable(names);
                updateLstSelected(this.sel_selection);

                if (curr_idx >= this.lstSelected.getModel().getSize()) {
                    curr_idx = this.lstSelected.getModel().getSize() - 1;
                }
                
                this.lstSelected.setSelectedIndex(curr_idx);
                this.txaOutput.setText("");
            }
        } catch (NullPointerException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.INFO, "no List entries selected");
        }
    }
    
    private void handleBtnSelect() {
        try {
            List<String> names = this.avail_selection.getSelectedValuesList();
            
            if (!names.isEmpty()) {
                int curr_idx = this.lstAvailable.getSelectedIndex();
    
                fillLstSelected(names);
                updateLstAvailable(this.avail_selection);
                
                if (curr_idx >= this.lstAvailable.getModel().getSize()) {
                    curr_idx = this.lstAvailable.getModel().getSize() - 1;
                }
                
                this.lstAvailable.setSelectedIndex(curr_idx);
                this.txaOutput.setText("");
            }
        } catch (NullPointerException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.INFO, "no List entries selected");
        }
    }
    
    private void handleBtnSource() {
        final String ini_path; 
        final String name;

        if (this.txtSource.getText().equals("")) {
            ini_path = "/";
        } else {
            ini_path = this.txtSource.getText();
        }

        name = chooseFilePath(
                   JFileChooser.OPEN_DIALOG
                  ,JFileChooser.DIRECTORIES_ONLY
                  ,ini_path
                  ,null
               );
        if (!name.equals("")) {
            this.txtSource.setText(name);
            resetList(this.lstSelected);
            fillLstAvailable(name);
            setImagePreview("");
            this.txaOutput.setText("");
        }
    }

    private void handleBtnTarget() {
        final String ini_path; 
        final String name;

        if (
            this.txtTarget.getText().equals(
                FileIO.getCONFIG().getOutput_file()[FileIO.TemplateType.ALBUM.toInt()]
            ) || this.txtTarget.getText().equals(
                FileIO.getCONFIG().getOutput_file()[FileIO.TemplateType.CUBE.toInt()]
            )
        ) {
            ini_path = "/";
        } else {
            ini_path = this.txtTarget.getText();
        }

        name = chooseFilePath(
                   JFileChooser.SAVE_DIALOG
                  ,JFileChooser.FILES_ONLY
                  ,ini_path
                  ,new FileFilter() {
                      @Override
                      public String getDescription() {
                          return "Web Documents (*.html)";
                      }
                      @Override
                      public boolean accept(File f) {
                          return (
                              f.getName().toLowerCase().endsWith(".html") ||
                              f.isDirectory()
                          );
                      }
                   }
               );        
        
        if(!name.equals("")) {
            this.txtTarget.setText(name);
            this.txaOutput.setText("");
        }
    }

    private void handleBtnUp() {
        int curr_idx = this.lstSelected.getSelectedIndex();
        
        moveLstEntry(this.lstSelected, curr_idx, curr_idx - 1);
    }
    
    private void handleBtnDown() {
        int curr_idx = this.lstSelected.getSelectedIndex();
        
        moveLstEntry(this.lstSelected, curr_idx, curr_idx + 1);
    }

    private void moveLstEntry(JList lst, int curr_idx, int mov_idx) {
        try {
            DefaultListModel model = (DefaultListModel) lst.getModel();
            
            if (mov_idx < 0) {
                mov_idx = model.getSize() - 1;
            } else if (mov_idx == model.getSize()) {
                mov_idx = 0;
            }
            
            Object element = model.remove(curr_idx);
            model.add(mov_idx, element);
            lst.setModel(model);
            lst.setSelectedIndex(mov_idx);
        } catch (Exception ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.INFO, "Empty list");
        }        
    }
    
    private void resetList(JList lst) {
        lst.setModel(new DefaultListModel());
    }
    
    private void setImagePreview(String image_path) {
        if (!image_path.equals("")) {
            ImageIcon img_full = new ImageIcon(image_path);
            float ratio = ((float) img_full.getIconWidth() / (float) img_full.getIconHeight());
            int   scal_height;
            int   scal_width;
            
            if (img_full.getIconHeight() > img_full.getIconWidth()) {
                scal_height = this.lblPreview.getHeight();
                scal_width  = (int) (this.lblPreview.getHeight() * ratio);
            } else {
                scal_width  = this.lblPreview.getWidth();
                scal_height = (int) (this.lblPreview.getWidth() / ratio);
            }

            ImageIcon img_scaled = new ImageIcon(
                                     img_full.getImage().getScaledInstance(
                                       scal_width
                                      ,scal_height
                                      ,Image.SCALE_DEFAULT
                                     )
                                   );
            
            this.lblPreview.setIcon(img_scaled);
        } else {
            this.lblPreview.setIcon(null);
        }
    }
    
    private void updateLstAvailable(JList selection) {
        SortedListModel model;

        try {
            model = (SortedListModel) this.lstAvailable.getModel();
        } catch (Exception ex) {
            model = new SortedListModel();
        }
        
        try {
            List<String> names = selection.getSelectedValuesList();
            
            if(!names.isEmpty()) {
                for (String name : names) {
                    model.removeElement(name);
                }
                
                this.lstAvailable.setModel(model);
                setImagePreview("");
            }
        } catch (NullPointerException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.INFO, "no List entries for update");
        }
    }
        
    private void updateLstSelected(JList selection) {
        DefaultListModel model;

        try {
            model = (DefaultListModel) this.lstSelected.getModel();
        } catch (Exception ex) {
            model = new DefaultListModel();
        }
        
        try {
            List<String> names = selection.getSelectedValuesList();
            
            if(!names.isEmpty()) {
                for (String name : names) {
                    model.removeElement(name);
                }
                
                this.lstSelected.setModel(model);
                setImagePreview("");
            }
        } catch (NullPointerException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.INFO, "no List entries for update");
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (
            ClassNotFoundException | InstantiationException | IllegalAccessException | 
            javax.swing.UnsupportedLookAndFeelException ex
          ) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainWindow().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnDown;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSelect;
    private javax.swing.JButton btnSource;
    private javax.swing.JButton btnTarget;
    private javax.swing.JButton btnUp;
    private javax.swing.JComboBox<String> cmbTemplate;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblAvailable;
    private javax.swing.JLabel lblCopyright;
    private javax.swing.JLabel lblOutput;
    private javax.swing.JLabel lblPreview;
    private javax.swing.JLabel lblSelected;
    private javax.swing.JLabel lblSource;
    private javax.swing.JLabel lblTarget;
    private javax.swing.JLabel lblTemplate;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JList<String> lstAvailable;
    private javax.swing.JList<String> lstSelected;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JTextArea txaOutput;
    private javax.swing.JTextField txtSource;
    private javax.swing.JTextField txtTarget;
    // End of variables declaration//GEN-END:variables
}